{"version":3,"sources":["images/paperclip.jpg","images/ai.webp","components/Paperclip.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Paperclip","props","state","paperclips","autoclipers","startTime","Date","gameStart","gameTime","makePaperClip","bind","buyAutoClipper","autobuy","checkGame","intervalId","setInterval","this","setState","prevState","gameEnd","getTime","clearInterval","ls","set","scores","get","push","sort","score1","score2","newScores","i","length","className","class","onClick","src","paperclip","alt","width","height","ai","window","location","reload","React","Component","App","oldscores","startGame","start","checkGameStatus","updateScores","map","score","index","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b32780b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paperclip.670a3d03.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ai.c07f374e.webp\";","import React from 'react';\nimport ls from 'local-storage';\nimport paperclip from '../images/paperclip.jpg';\nimport ai from '../images/ai.webp';\nimport './Paperclip.css';\n\nclass Paperclip extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      paperclips: 0,\n      autoclipers: 0,\n      startTime: new Date(),\n      gameStart: true,\n      gameTime: 0\n    };\n    this.makePaperClip = this.makePaperClip.bind(this);\n    this.buyAutoClipper = this.buyAutoClipper.bind(this);\n    this.autobuy = this.autobuy.bind(this);\n    this.checkGame = this.checkGame.bind(this);\n    this.intervalId = setInterval(() => {\n      this.autobuy();\n    }, 500);\n  }\n\n  makePaperClip() {\n    this.setState(prevState => {\n      return {paperclips: prevState.paperclips+1}\n    }, this.checkGame());\n  }\n\n  buyAutoClipper() {\n    if(this.state.paperclips >= 5) {\n      this.setState(prevState => {\n        return {\n          paperclips: prevState.paperclips-5,\n          autoclipers: prevState.autoclipers+1\n        }\n      });\n    }\n  }\n\n  autobuy() {\n    if(this.state.autoclipers) {\n      this.setState(prevState => ({\n        paperclips: prevState.paperclips + prevState.autoclipers\n      }), this.checkGame());\n    }\n  }\n\n  checkGame() {\n    if(this.state.paperclips >= 1000) {\n      let gameEnd = (new Date().getTime() - this.state.startTime.getTime()) / 1000;\n      this.setState({\n        gameStart: false,\n        gameTime: gameEnd\n      });\n      clearInterval(this.intervalId);\n      ls.set('startGame', false);\n      let scores = ls.get('scores');\n      if(!scores) {\n        scores = [];\n      }\n      scores.push(gameEnd);\n      scores.sort((score1, score2) => score1 - score2);\n      let newScores = [];\n      let i = 0;\n      while(i < 10 && i < scores.length) {\n        newScores.push(scores[i++]);\n      }\n\n      ls.set('scores', newScores);\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"gamearea\">\n        {\n          this.state.gameStart ? \n            <div class=\"game-grid\">\n              <img onClick={this.makePaperClip} src={paperclip} alt=\"Paperclips\" width=\"250px\" height=\"250px\" />\n              <img onClick={this.buyAutoClipper} src={ai} alt=\"Automatic Clipper\" width=\"250px\" height=\"250px\" />\n\n              <span>Paperclips: {this.state.paperclips}</span>\n              <span>Clippers: {this.state.autoclipers}</span>\n            </div>\n            :\n            <div>\n              <p>Success! You made 1,000 paper clips</p>\n              <p>Your score is {this.state.gameTime} seconds.</p>\n              <button onClick={() => window.location.reload(false)}>Go Back!</button>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Paperclip;\n","import React from 'react';\nimport './App.css';\nimport Paperclip from './components/Paperclip';\nimport ls from 'local-storage';\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    let oldscores = ls.get('scores') ? ls.get('scores') : [];\n    this.state = {\n      startGame: false,\n      scores: oldscores\n    };\n    this.start = this.start.bind(this);\n    this.checkGameStatus = this.checkGameStatus.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n  }\n\n  start() {\n    this.setState(() => ({\n      startGame : true\n    }));\n    ls.set('startGame', true);\n  }\n\n  checkGameStatus() {\n    if(!ls.get('startGame')) {\n      this.setState({\n        startGame: false\n      });\n    }\n  }\n\n  updateScores() {\n    this.setState({\n      scores: ls.get('scores')\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>How fast can you make 1,000 paper clips?</h3>\n        {\n          this.state.startGame ?\n            <Paperclip /> :\n            <div>\n              <button onClick={this.start}>Start Game!</button>\n              <h3>High Scores:</h3>\n                {this.state.scores.map((score, index) => (\n                  <p key={index}>{score}</p>\n                ))}\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}